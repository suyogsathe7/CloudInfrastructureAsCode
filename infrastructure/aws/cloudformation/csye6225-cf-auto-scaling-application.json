{
    "AWSTemplateFormatVersion" : "2010-09-09",
 
    "Parameters" : {
         "myBucketName":{
            "Default":"shunti.me",
            "Description": "S3 bucket name",
            "Type": "String"
         },
         
         "codeDeployBucket":{
            "Default": "code-deploy.shunti.me.csye6225.com",
            "Description": "S3 bucket name",
            "Type": "String"
         },
         
         "mySNSTopicName":{
            "Default":"reset_password",
            "Description": "SNS Topic name",
            "Type": "String"
         },

          "ListS3BucketsRole":{
            "Default":"ayyodevre",
            "Description": "S3 bucket name",
            "Type": "String"
         },
      
         "DBName":{
             "Default": "csye6225",
             "Description": "This is my database name",
             "Type": "String"
         },
         "DBAllocatedStorage" :{
             "Default": "5",
             "Description" : "The size of database in GB",
             "Type": "Number"
         },
         "DBClass" : {
             "Default" : "db.t2.medium",
             "Description" : "Database instance class",
             "Type" : "String"
         },
         "DBUsername" : {
             "Default" : "csye6225master",
             "Description" : "The database admin account username",
             "Type": "String",
             "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*"
         },
         "DBPassword" : {
             "Default": "csye6225password",
             "Description" : "The database admin account password",
             "Type": "String",
             "AllowedPattern" : "[a-zA-Z0-9]*"
         },
         "KeyName":{
             "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
             "Type": "AWS::EC2::KeyPair::KeyName",
             "ConstraintDescription": "must be the name of an existing EC2 pair",	    
             "Default":"KeyName"
         },
         "InstanceType":{
             "Description" : "EC2 instance type",
             "Type" : "String",
             "Default" : "t2.micro",
             "AllowedValues" : [ "t2.micro"],
             "ConstraintDescription" : "Must be a valid EC2 instance type"
             
         },
         "Subnet1": {
             "Type": "AWS::EC2::Subnet::Id",
             "Description": "Subnet to launch the instance into.",
             "Default" :  "subnet-061c2c38fffcf9a25" 
         },
         "Subnet2": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Subnet to launch the instance into.",
            "Default" :  "subnet-061c2c38fffcf9a25" 
        },
         "VPC": {
             "Type": "AWS::EC2::VPC::Id",
             "Description": "VPC to launch the instance into.",
             "Default" : "vpc-0795fb4435f56923b"
         },
         "SSHLocation" : {
             "Description" : "The IP address range that can be used to SSH to the EC2 instances",
             "Type": "String",
             "MinLength": "9",
             "MaxLength": "18",
             "Default": "0.0.0.0/0",
             "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
             "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x"
            
         },
         "CertificateARN":{
          "Default": "12345",
          "Description": "Hosted Zone ID",
          "Type": "String"
         },
         
          "IPtoBlock1": {
            
            "Description": "IPAddress to be blocked",
            "Default" :  "192.0.2.44/32", 
            "Type": "String"
        },
        
        
         "IPtoBlock2": {
            
            "Description": "IPAddress to be blocked",
            "Default" :  "192.0.2.44/32",
            "Type": "String"
        },
         
         
         "CodeDeployServiceRoleArn":{
           "Default":"CodeDeployServiceRoleArn",
           "Description":"CodeDeployServiceRoleArn",
           "Type":"String"
          }

      
        },
     
     "Mappings" : {
         
         "AWSRegionArch2AMI" : {
             "us-east-1"      : { "HVM64" : "ami-9887c6e7"}        
         }          
     },
 
    "Resources" : { 
      "InstanceSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
            "GroupName" : "csye6225-webapp",
            "GroupDescription" : "csye6225 webapp security",
            "VpcId" : {"Ref" : "VPC"},    
            "SecurityGroupIngress" : [{
                "IpProtocol" : "tcp", 
                "FromPort": 22,
                "ToPort" : 22,
                "CidrIp" : "0.0.0.0/0"
            },
            {
                "IpProtocol" : "tcp",                    
                "FromPort": 80,
                "ToPort" : 80,                    
                "CidrIp" : "0.0.0.0/0"
            },
            
            {
                "IpProtocol" : "tcp",                    
                "FromPort": 8080,
                "ToPort" : 8080,                    
                "CidrIp" : "0.0.0.0/0"
            },
            
            {
                "IpProtocol" : "tcp",
                "FromPort": 443,
                "ToPort" : 443,
                "CidrIp" : "0.0.0.0/0"
            },
            {
                "IpProtocol" : "tcp", 
                "FromPort": 3306,
                "ToPort" : 3306,
                "CidrIp" : "0.0.0.0/0"
            }
            ]
            
        }
    },
    "myLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "DependsOn":["InstanceSecurityGroup"],
      "Properties" : {
        "Subnets" : [{"Ref": "Subnet1"},{"Ref": "Subnet2"}],
        "SecurityGroups" : [{"Ref" : "InstanceSecurityGroup"}],
        "Scheme" : "internet-facing",
        "Name":"myloadbalancer"
      }
    },
    
    
    "MyWebACLAssociation": {
        
        "Type": "AWS::WAFRegional::WebACLAssociation",
        "DependsOn":["myLoadBalancer","shuntiWebACL"],
        "Properties": {
            "ResourceArn": { "Ref": "myLoadBalancer" },
            "WebACLId": { "Ref": "shuntiWebACL" }
        }
    },
    
    
        "myAutoScalingGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "DependsOn" : ["myListener","myTargetGroup","myLaunchConfig"],
            "Properties" : {
                "VPCZoneIdentifier" : [{"Ref" : "Subnet1"}, {"Ref" : "Subnet2"}],
                "LaunchConfigurationName" : { "Ref" : "myLaunchConfig"},
                "MinSize" : "3",
                "MaxSize" : "10",
                "Cooldown" : "60",
                "DesiredCapacity" : "3",
                "TargetGroupARNs" : [{ "Ref" : "myTargetGroup"}],
                "Tags":[{"Key" : "Name", "Value" : "prod-ec2", "PropagateAtLaunch" : "true"}],
                "AutoScalingGroupName":"myAutoScalingGroup"
            }
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {
                "Ref": "myAutoScalingGroup"
              },
              "Cooldown": "60",
              "ScalingAdjustment": "1"
            }
          },
          "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
              "AdjustmentType": "ChangeInCapacity",
              "AutoScalingGroupName": {
                "Ref": "myAutoScalingGroup"
              },
              "Cooldown": "60",
              "ScalingAdjustment": "-1"
            }
          },
          "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-up if CPU > 10% for 10 minutes",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "300",
              "EvaluationPeriods": "2",
              "Threshold": "10",
              "AlarmActions": [
                {
                  "Ref": "WebServerScaleUpPolicy"
                }
              ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                    "Ref": "myAutoScalingGroup"
                  }
                }
              ],
              "ComparisonOperator": "GreaterThanThreshold"
            }
          },
          "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
              "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
              "MetricName": "CPUUtilization",
              "Namespace": "AWS/EC2",
              "Statistic": "Average",
              "Period": "300",
              "EvaluationPeriods": "2",
              "Threshold": "8",
              "AlarmActions": [
                {
                  "Ref": "WebServerScaleDownPolicy"
                }
              ],
              "Dimensions": [
                {
                  "Name": "AutoScalingGroupName",
                  "Value": {
                    "Ref": "myAutoScalingGroup"
                  }
                }
              ],
              "ComparisonOperator": "LessThanThreshold"
            }
          },

          "myLaunchConfig" : {
              "Type" : "AWS::AutoScaling::LaunchConfiguration",
              "DependsOn" : ["RDSInstance","InstanceSecurityGroup"],
              "Properties" : {
                "LaunchConfigurationName":"myLaunchConfig",
                "ImageId" : "ami-9887c6e7",
                "InstanceType"   : { "Ref" : "InstanceType" },
                "IamInstanceProfile" : {
                    "Ref" : "ListS3BucketsRole"
                },
                "SecurityGroups" : [ {"Ref": "InstanceSecurityGroup"}],
                "KeyName" : { "Ref" : "KeyName"},
                "AssociatePublicIpAddress" : true,  
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": ["\n",
                 ["#!/bin/bash -xe ",
                  "sudo bash",
                  "yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
                  "yum install mysql -y",
                  "yum install awscli -y",
                  "systemctl start ntpd",
                  "systemctl enable ntpd",
                  "cd /home/centos/",
                  "wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
                  "chmod +x ./install",
                  "./install auto",
                  "groupadd tomcat",
                  "useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
                  "cd /tmp",
                  "wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
                  "mkdir /opt/tomcat",
                  "tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
                  "cd /opt/tomcat",
                  "chgrp -R tomcat /opt/tomcat",
                  "chmod -R g+r conf",
                  "chmod g+x conf",
                  "chown -R tomcat webapps/ work/ temp/ logs/",
                  "cd /usr/lib/systemd/system",
                  "touch tomcat.service",
                  "echo '[Unit]' > tomcat.service",
                  "echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
                  "echo 'After=syslog.target network.target' >> tomcat.service",
                  "echo '[Service]' >> tomcat.service",
                  "echo 'Type=forking' >> tomcat.service",
                  "echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
                  "echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
                  "echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
                  "echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
                  "echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
                  "echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom\"' >> tomcat.service",
                  "echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
                  "echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
                  "echo 'User=tomcat' >> tomcat.service",
                  "echo 'Group=tomcat' >> tomcat.service",
                  "echo 'UMask=0007' >> tomcat.service",
                  "echo 'RestartSec=10' >> tomcat.service",
                  "echo 'Restart=always' >> tomcat.service",
                  "echo '[Install]' >> tomcat.service",
                  "echo 'WantedBy=multi-user.target' >> tomcat.service",
                  "echo '#!/bin/sh' >> /opt/tomcat/bin/setenv.sh",
                  "wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
		          "rpm -U ./amazon-cloudwatch-agent.rpm",
                  "cd /opt/",
                  "touch cloudwatch-config.json",
		  "echo '{\"agent\":{' >> cloudwatch-config.json",
	 	  "echo '\"metrics_collection_interval\":10,' >> cloudwatch-config.json",
		  "echo '\"logfile\": \"/var/logs/amazon-cloudwatch-agent.log\"' >> cloudwatch-config.json",
		  "echo '},' >> cloudwatch-config.json",
		  "echo '\"logs\":{\"logs_collected\": {\"files\": {\"collect_list\": [{\"file_path\": \"/opt/tomcat/logs/csye6225.log\",\"log_group_name\": \"csye6225_fall2018\",\"log_stream_name\": \"webapp\"}]}},\"log_stream_name\": \"cloudwatch_log_stream\"},' >> cloudwatch-config.json", 
		  "echo '\"metrics\":{' >> cloudwatch-config.json",
		  "echo '\"metrics_collected\":{' >> cloudwatch-config.json",
		  "echo '\"statsd\":{' >> cloudwatch-config.json",
		  "echo '\"service_address\":\":8125\", \"metrics_collection_interval\":10, \"metrics_aggregation_interval\":0 }}}}' >> cloudwatch-config.json",
		  "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s",
                  {
                  "Fn::Join": [
                    "",
                    [
                      "echo 'JAVA_OPTS=\"${JAVA_OPTS} -Durl=jdbc:mysql://",
                      {
                        "Fn::GetAtt": [
                          "RDSInstance",
                          "Endpoint.Address"
                        ]
                      },
                      ":3306/csye6225\"'>> /opt/tomcat/bin/setenv.sh \n"
                    ]
                  ]
                },
                {"Fn::Join":["",["sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dspring.profiles.active=aws\\\"\" >> /opt/tomcat/bin/setenv.sh "]]},
                {"Fn::Join":["",["sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DendpointUrl=https://s3.us-east-1.amazonaws.com\\\"\" >> /opt/tomcat/bin/setenv.sh "]]},
                {"Fn::Join":["",["sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dfolder=centos\\\"\" >> /opt/tomcat/bin/setenv.sh "]]},
                {"Fn::Join":["",["sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dusername=",{"Ref":"DBUsername"},"\\\"\" >> /opt/tomcat/bin/setenv.sh "]]},
                {"Fn::Join":["",["sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -Dpassword=",{"Ref":"DBPassword"},"\\\"\" >> /opt/tomcat/bin/setenv.sh "]]},
                {"Fn::Join":["",["sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DbucketName=",{"Ref":"S3Bucket"},"\\\"\" >> /opt/tomcat/bin/setenv.sh "]]},
                {"Fn::Join":["",["sudo echo \"JAVA_OPTS=\\\"\\${JAVA_OPTS} -DsnsName=",{"Ref":"mySNSTopicName"},"\\\"\" >> /opt/tomcat/bin/setenv.sh "]]},
                  
                "chmod +x /opt/tomcat/bin/setenv.sh",
                
                "systemctl daemon-reload",
                  "#systemctl start cloudwatch.service",
                  "#systemctl enable cloudwatch.service",   
                  "systemctl enable tomcat.service",
                  "systemctl start tomcat.service"]
                 ]}}

              }               
            },


         "MyDBSubnetGroup" : {
              "Type" : "AWS::RDS::DBSubnetGroup",
              "Properties" : {
              "DBSubnetGroupDescription" : "Subnets available for the RDS DB Instance",
              "SubnetIds" : [ { "Ref" : "Subnet1" },
                              { "Ref" : "Subnet2"}  ]
             }
         }, 

         


          "myListener" : {
            "Type" : "AWS::ElasticLoadBalancingV2::Listener",
            "DependsOn":["myTargetGroup","myLoadBalancer"],
            "Properties" : {
              "Certificates":[{"CertificateArn":{"Ref":"CertificateARN"}}],
              "DefaultActions" : [{                
                "Type" : "forward",
                "TargetGroupArn" : { "Ref" : "myTargetGroup" }
              }],
              "LoadBalancerArn" : { "Ref" : "myLoadBalancer" },
              "Port" : "443",
              "Protocol" : "HTTPS"
                      
            }
          },
          
      
          "myTargetGroup" : {
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "DependsOn":"myLoadBalancer",
            "Properties" : {
              "HealthCheckPath" : "/webapi_assignment3-0.0.1-SNAPSHOT",
              "Matcher": {
                "HttpCode" : "200,302"
              } ,
              "HealthCheckIntervalSeconds" : 60,
              "HealthCheckTimeoutSeconds" : 5,
              "HealthyThresholdCount" : 3,
              "Port" : 8080,
              "Protocol" : "HTTP",
              "UnhealthyThresholdCount" : 5,
              "VpcId" : {"Ref" : "VPC"},
              "Name":"myTargetGroup"
            }
          },

          
  
  "DBSecurityGroup": {
    "Type": "AWS::RDS::DBSecurityGroup",
    "Properties": {
       "EC2VpcId" : { "Ref" : "VPC" },
       "DBSecurityGroupIngress": [
          {"EC2SecurityGroupId": {
               "Fn::GetAtt": [
                 "InstanceSecurityGroup",
                 "GroupId"
               ]
        }
           }
       ],
       "GroupDescription": "DB SecurityGroup"
    }
  },




     
         "DynamoDBTable" : {
             "Type" : "AWS::DynamoDB::Table",
             "Properties" : {
                 "AttributeDefinitions" : [ {"AttributeName": "username",
                                             "AttributeType": "S"} ],
                 
                 "KeySchema" : [ {"AttributeName" : "username",
                                  "KeyType" : "HASH"} ],
                 
                 "ProvisionedThroughput" : {"ReadCapacityUnits": "5",
                                            "WriteCapacityUnits" : "5"},
                 
                 "TimeToLiveSpecification": {"AttributeName": "ttl_timestamp",
                                             "Enabled": "TRUE"},
                 
                 "TableName" : "csye6225"
             }
         },
         "S3Bucket" : {
         "Type" : "AWS::S3::Bucket",
            "Properties" : {

                "BucketName": {"Fn::Join": ["", ["csye6225-fall2018-", {"Ref": "myBucketName" },".csye6225.com" ]] }


            } 

            },

                "S3BucketPolicy" : {
        "Type" : "AWS::S3::BucketPolicy",
     "Properties" :   {
        "Bucket" : {"Ref" : "S3Bucket"},
        "PolicyDocument" : {
            "Version" : "2012-10-17",
    "Statement": [
        {
            "Sid": "AddPerm",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:*",
            "Resource": {"Fn::Join" : ["",["arn:aws:s3:::", {"Ref" : "S3Bucket"}, "/*"]]}
        }
    ]
}}},
         "RDSInstance": {
            "Type" : "AWS::RDS::DBInstance",
            "Properties" :
            {  
                "DBName" : { "Ref" : "DBName"},
                "AllocatedStorage" : { "Ref" : "DBAllocatedStorage"},
                "DBInstanceClass" : { "Ref" : "DBClass"},
                "Engine" : "MySQL",
                "EngineVersion" : "5.6.35",
                "MasterUsername" : { "Ref" : "DBUsername"},
                "MasterUserPassword" : { "Ref" : "DBPassword"},
                "DBSubnetGroupName" : {"Ref" : "MyDBSubnetGroup"},
                "DBSecurityGroups" : [ { "Ref" : "DBSecurityGroup"}],                
                "DBInstanceIdentifier" : "csye6225-fall2018",
                "MultiAZ" : false,
                "PubliclyAccessible" : false
                           
            },
            "DeletionPolicy" : "Delete" 
        },
        "myRecordSet":{
          "Type" : "AWS::Route53::RecordSet",
          "DependsOn":"myLoadBalancer",
          "Properties" : {
              "AliasTarget" : {
                              "DNSName":{"Fn::GetAtt":["myLoadBalancer","DNSName"]},
                              "HostedZoneId":{"Fn::GetAtt":["myLoadBalancer","CanonicalHostedZoneID"]},
                              "EvaluateTargetHealth":true
                            },
              "Name" : {"Fn::Join" : ["",[ "*.csye6225-fall2018-",{"Ref": "myBucketName" },"."]]},
              "HostedZoneName" : {"Fn::Join" : ["",[ "csye6225-fall2018-",{"Ref": "myBucketName" },"."]]},
              "Type" : "A"
        }
      },
      "CodeDeployApplication" : {
        "Type" : "AWS::CodeDeploy::Application",
        "Properties" : {
          "ApplicationName" : "CODE_DEPLOY_APPLICATION_NAME",
          "ComputePlatform" : "Server"
        }
      },
      
      "CodeDeploymentGroup" : {
        "DependsOn" : ["CodeDeployApplication","myTargetGroup","myAutoScalingGroup"],
        "Type" : "AWS::CodeDeploy::DeploymentGroup",
        "Properties" : {
          "ApplicationName" : "CODE_DEPLOY_APPLICATION_NAME",
          "DeploymentGroupName" : "deployment1",
          "AutoScalingGroups":[{"Ref":"myAutoScalingGroup"}],
          "DeploymentStyle": {
            "DeploymentOption" : "WITHOUT_TRAFFIC_CONTROL",
            "DeploymentType": "IN_PLACE"
          },
          "LoadBalancerInfo":{
            "TargetGroupInfoList":[{"Name":{"Fn::GetAtt":["myTargetGroup","TargetGroupName"]}}]
          },
          "Ec2TagFilters" : [{"Key" : "Name" ,"Type" : "KEY_AND_VALUE","Value":"prod-ec2" }],
          "DeploymentConfigName" : "CodeDeployDefault.OneAtATime",
          "ServiceRoleArn" : {"Ref":"CodeDeployServiceRoleArn"}
        }
      }, 
     
    
    
    
    "shuntiWebACL": {
        "Type": "AWS::WAFRegional::WebACL",
        "DependsOn" : ["shuntiIPSetRule"],        
        "Properties": {
            "Name": "shuntiWebACL",
            "DefaultAction": {
                "Type": "ALLOW"
            },
            "MetricName" : "shuntiWebACL",
            "Rules": [
            {
                "Action" : {
                    "Type" : "BLOCK"
                },
                "Priority" : 5,
                "RuleId" : { "Ref" : "shuntiIPSetRule" }
            },
            
            {
                "Action" : {
                    "Type" : "BLOCK"
                },
                "Priority" : 10,
                "RuleId" : { "Ref" : "reqSizeRule" }
            },
            
            {
                "Action" : {
                    "Type" : "BLOCK"
                },
                "Priority" : 1,
                "RuleId" : { "Ref" : "shuntiIPSetRule" }
            }
            
            ]
        }      
    },
    
    "shuntiIPSetRule" : {
        
        "Type": "AWS::WAFRegional::Rule",
        
        "DependsOn" : ["myIPSetBlacklist"],
        
        "Properties": {
            "Name": "shuntiIPSetRule",
            "MetricName" : "shuntiIPSetRule",
            "Predicates": [
            {
                "DataId" : {"Ref":"myIPSetBlacklist"},
                "Negated" : false,
                "Type" : "IPMatch"
            }
            ]
        }      
    },
    
    "reqSizeRule": {
        "Type": "AWS::WAFRegional::Rule",
        "DependsOn" : ["sizeRestrict"],
        
        "Properties": {
           "MetricName": "reqSizeRule",
           "Name": "reqSizeRule",
           "Predicates": [
              {
                 "Type": "SizeConstraint",
                 "Negated": false,
                 "DataId": {"Ref" : "sizeRestrict"}
              }
           ]
        }
     },
     
    "wafrSQLiRule": {
        "Type": "AWS::WAFRegional::Rule",
        "DependsOn" : ["wafrSQLiSet"],
        
        "Properties": {
           "MetricName": "wafrSQLiRule",
           "Name": "wafr-SQLiRule",
           "Predicates": [
              {
                 "Type": "SqlInjectionMatch",
                 "Negated": false,
                 "DataId": {"Ref" : "wafrSQLiSet"}
              }
           ]
        }
     },      
     
    
    
    
    "myIPSetBlacklist": {
        "Type": "AWS::WAFRegional::IPSet",
        "Properties": {
            "Name": "myIPSetBlacklist",
            "IPSetDescriptors": [
            {
                "Type" : "IPV4",
                "Value" : {"Ref":"IPtoBlock1"}
            },
            {
                "Type" : "IPV4",
                "Value" : {"Ref":"IPtoBlock2"}
            }
            ]
        }      
    },
    
    "sizeRestrict": {
        "Type": "AWS::WAFRegional::SizeConstraintSet",
        "Properties": {
           "Name": "sizeRestrict",
           "SizeConstraints": [
              {
                 "FieldToMatch": {
                    "Type": "URI"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "512"
              },
              {
                 "FieldToMatch": {
                    "Type": "QUERY_STRING"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "1024"
              },
              {
                 "FieldToMatch": {
                    "Type": "BODY"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "10000000"
              },
              {
                 "FieldToMatch": {
                    "Type": "HEADER",
                    "Data": "cookie"
                 },
                 "TextTransformation": "NONE",
                 "ComparisonOperator": "GT",
                 "Size": "4096"
              }
           ]
        }
     },
     
    "wafrSQLiSet": {
       "Type": "AWS::WAFRegional::SqlInjectionMatchSet",
       "Properties" : {
         "Name": "wafrSQLiSet",
         "SqlInjectionMatchTuples": [
            {
               "FieldToMatch": {
                  "Type": "URI"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "URI"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "QUERY_STRING"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "QUERY_STRING"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "BODY"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "BODY"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "HEADER",
                  "Data": "cookie"
               },
               "TextTransformation": "URL_DECODE"
            },
            {
               "FieldToMatch": {
                  "Type": "HEADER",
                  "Data": "cookie"
               },
               "TextTransformation": "HTML_ENTITY_DECODE"
            }
         ]
       }
     }
    
    
    
    }

    
} 
 
 
